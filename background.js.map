{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;;UAAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBa;;AAEb,cAAc,mBAAO,CAAC,qCAAgB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,0BAA0B,gCAAgC;AAC1D,kCAAkC,2BAA2B;AAC7D,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA","sources":["webpack://convert-time/webpack/bootstrap","webpack://convert-time/./src/background.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\n\nconst pjson = require('../config.json');\nchrome.runtime.onMessage.addListener(\n  function (request, sender, sendResponse) {\n\n    let init = {\n      method: request.method ? request.method : \"GET\",\n      redirect: 'follow',\n    };\n    if (request.method !== 'GET') {\n      init.body = request.data ? JSON.stringify(request.data) : {};\n    }\n\n    if (!request.fetch && request.msg !== 'capture') {\n      try {\n        let timeoutSecond = 60000;\n        timeout(timeoutSecond, fetch(request.url, init).then(response => response.json()).catch(err => err))\n          .then(response => sendResponse(response))\n      } catch (error) {\n      }\n    }\n    if (request.action === 'createTab') {\n      chrome.tabs.create({url: request.url, active: false}, function () {\n        chrome.storage.local.set({['fetchCors']: request.url});\n      });\n\n    }\n\n    function timeout(milliseconds, promise) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject(new Error(\"TIMEOUT\"))\n        }, milliseconds)\n        promise.then(resolve, reject)\n      })\n    }\n\n    return true;\n  }\n);\n\n\n"],"names":[],"sourceRoot":""}